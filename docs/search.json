[{"path":"https://monasharp.github.io/game-package-bilbies/articles/blackjack-design.html","id":"blackjack-design","dir":"Articles","previous_headings":"","what":"Blackjack Design","title":"blackjack_design","text":"vignette provides overview design structure blackjack package, simulates game blackjack. help user understand package organized use functions effectively.","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/articles/blackjack-design.html","id":"package-function-name","dir":"Articles","previous_headings":"","what":"Package function name:","title":"blackjack_design","text":"- play_blackjack(): main function simulates single player game blackjack. - play_blackjack_multi(): function simulates multi-player game blackjack, allowing un limited number players play dealer (default setting 2). - simulation_blackjack(): function simulates game blackjack specified threshold user want stay number round, returning results simulation user usually just stop hit total value hand greater equal threshold. - deal_hand(): function deals hand cards (default 2) player dealer. also check whether deck used 75% reshuffles deck necessary. - create_shuffle_deck(): function creates shuffled deck cards (default number deck time set 4 casino) ## Function interact card: - card_value(): function returns value card, taking account special case Ace, can worth 1 11. - card_name(): function returns name card, “Ace Spades” “10 Hearts”. - card_suit(): function returns suit card, “Spades”, “Hearts”, “Diamonds”, “Clubs”. - card_rank(): function returns rank card, “Ace”, “2”, “3”, …, “10”, “Jack”, “Queen”, “King”. - card_symbol(): function returns symbol card, “”, “2”, “3”, …, “10”, “J”, “Q”, “K”. - card_is_face(): function checks card face card (Jack, Queen, King) returns TRUE FALSE.","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/articles/blackjack-design.html","id":"arguments-for-the-functions","dir":"Articles","previous_headings":"","what":"Arguments for the functions:","title":"blackjack_design","text":"- play_blackjack() play_blackjack_multi() designed user-interactive approach, therefore argument single player multiplayer version input_fn input user decide whether hit stay. Normally just want enjoy game, dont need worry still can fun messing around argument. play_blackjack_multi(), can also set number players using n_players argument, set 2 default. - simulation_blackjack() threshold n_rounds arguments, allow user set threshold staying number rounds simulate. default threshold set 17, common strategy blackjack default number rounds set 1000. - deal_hand() deck n_cards argument, allow user specify deck cards use number cards deal. default number cards set 2, make easy deal hand blackjack game. - create_shuffle_deck() noOfDecks argument, allows user specify number decks use. default number decks set 4, common number decks used blackjack games.","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/articles/blackjack-design.html","id":"user-workflow","dir":"Articles","previous_headings":"","what":"User workflow","title":"blackjack_design","text":"user play game, step step: Choose either play_blackjack() play_blackjack_multi() start. game show line Hit (h) stand (s)? require input either “hit” “stand”, can type short key like “h” “s”. Make decision according dealer hand hand. simulation_blackjack like one time run simulation, can set threshold number rounds simulate. game return results simulation, including number wins, losses, push. can learn probability winning based threshold set. can also play using create_shuffle_deck() create shuffled deck cards use deal_hand(\"deck\") deal hand cards deck can now use card_value() check current score hand ace handling feature can also use card_name(), card_suit(), card_rank(), card_symbol() card_is_face get information cards hand. designed game allow user play blackjack quick pace short time game handle everything user need decide hit stand","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/articles/blackjack-design.html","id":"use-of-internal-modular-functions","dir":"Articles","previous_headings":"","what":"Use of internal modular functions","title":"blackjack_design","text":"Like arguments mentioned , play_blackjack() play_blackjack_multi() include input_fn argument allow user put “fake input” game user can technically play game without need typing anything. useful testing creating automated scripts play game. also include vector inside cards hidden user shown user curious card. However due nature fast pace game, possible user check card information inside game. recommend user check card information game user middle game.","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/articles/blackjack-design.html","id":"use-of-non-standard-evaluation-nse","dir":"Articles","previous_headings":"","what":"Use of Non-Standard Evaluation (NSE)","title":"blackjack_design","text":"package use Non-Standard Evaluation (NSE) functions. functions designed straightforward easy use, without need NSE.","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/articles/blackjack-design.html","id":"limitations","dir":"Articles","previous_headings":"","what":"Limitations","title":"blackjack_design","text":"optimized game quick enjoyable experience, acknowledge simplified version blackjack. aware game’s biggest limitation compare casino blackjack, fact include advanced features like money, betting, splitting, doubling . Single player multiplayer version game seem overlap techniquelly play single player play_blackjack_multi(n_players = 1) aware best design choice, believe still good starting point users want play blackjack. game include advanced strategies features like card counting, often used experienced players gain advantage blackjack. graphical user interface (GUI) visual representation cards normal user dont , may limit user experience players. game lack important features like strategy table guide players follow, may make less accessible beginners unfamiliar blackjack rules strategies. game designed quick-pace suitable players prefer leisurely strategic approach blackjack want save game pause look card information. game tested make sure functions work intended, acknowledge may bugs issues yet discovered.","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/articles/blackjack-design.html","id":"use-of-ai-support","dir":"Articles","previous_headings":"","what":"Use of AI support:","title":"blackjack_design","text":"used Chat GPT suppport creation game, help us debug test game, provide suggestions improvement. prompts used: “Insert old C++ code accept Character”, C++ work current game cause R crash? define vector cards generated deck make separate function define vector? using devtools::check(), got error says “Error getDLLRegisteredDLLsRoutines.DLLInfo(dll, addNames = FALSE)” fix ? devtools::document() generate RcppExports.R file src R folder, purpose file? current insert C++ code inside deal_hand, get error: ‘Blackjack_score_hand_cpp’ available package ‘blackjack’. mean, already C++ code package run devtools::document() generate RcppExports.R file, work? used format() format vector cards? acknowledge AI support great help development game, escpecially apply vctrs class new C++ code game. answers helped us fix code reduce time require debugging large margin. result, able optimize game improving design game, rather spending time debugging testing.","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/articles/blackjack-design.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"blackjack_design","text":"game designed quick enjoyable experience users want play blackjack short amount time. also develop game package compare previous one : Store card information vector, allows efficient handling cards makes easier access card information. Use C++ code optimize performance game. believe deal_hand() used function game, optimize use C++ code handle card dealing process allows faster efficient handling game logic. Write unit test make sure game works intended catch bugs issues become problem users. document code make easier users understand game works use functions effectively. also provide examples explanations use package, help users get started quickly. also provide vignette help users understand design structure package, help use package effectively. limitation AI usage section included provide transparency package’s capabilities limitations, well acknowledge role AI game development process. hope package provide fun engaging experience users want play blackjack R.","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/articles/blackjack-intro.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"blackjack-intro","text":"blackjack package provides flexible extensible framework simulating card game Blackjack R. Unlike many implementations, package supports single-player multiplayer modes, integrated dealer logic automated strategy simulation. also leverages {vctrs} package enhance game allowing users inspect manipulate card properties — rank, suit, value—play. Whether ’re building bots, testing strategies, just playing fun, blackjack package offers fully featured customised experience!","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/articles/blackjack-intro.html","id":"basic-blackjack-rules","dir":"Articles","previous_headings":"","what":"Basic Blackjack Rules","title":"blackjack-intro","text":"General Rules goal get close 21 possible without going . number cards count face value; face cards (J, Q, K) worth 10. Aces can count 1 11, whichever benefits hand . Blackjack hand Ace + 10-point card first deal. player dealer Blackjack, game push (tie); player busts (goes 21), automatically lose. Player Rules Players dealt two cards face can choose : Hit (draw another card); Stand (keep current hand); Double (double bet receive one card) Players can continue hit stand bust. multiplayer mode, player acts turn. Dealer Rules dealer reveals one face-card keeps one face-. Dealer must hit hand totals 17 . Dealer must stand 17s, including soft 17 (Ace + 6), unless using smart logic. dealer busts, remaining players win; dealer bust, hand compared player’s hand determine outcome (win/lose/push).","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/articles/blackjack-intro.html","id":"function-examples","dir":"Articles","previous_headings":"","what":"Function Examples","title":"blackjack-intro","text":"Initialise game loading library: package includes functions following facilitate game:","code":"library(blackjack)"},{"path":"https://monasharp.github.io/game-package-bilbies/articles/blackjack-intro.html","id":"create_shuffled_deck","dir":"Articles","previous_headings":"Function Examples","what":"1. create_shuffled_deck()","title":"blackjack-intro","text":"Creates shuffled Blackjack shoe (default = 208 cards). Checks number cards shuffled deck inspects first n number card:","code":"# Create a shuffled deck of cards deck <- create_shuffled_deck()   # Check how many cards are in the deck length(deck) ## [1] 208 # Show the first 5 cards in the deck head(deck, 5) ## card[5] ## 5♥ 9♣ 10♣ Q♠ Q♣"},{"path":"https://monasharp.github.io/game-package-bilbies/articles/blackjack-intro.html","id":"deal_hand","dir":"Articles","previous_headings":"Function Examples","what":"2. deal_hand()","title":"blackjack-intro","text":"Deals cards deck, shows cards dealt, updates :","code":"# Deal 2 cards from the deck deal <- deal_hand(deck, 2)    # Show the cards dealt deal$hand ## card[2] ## 5♥ 9♣ # Update the deck to remove dealt cards deck <- deal$deck   # Check how many cards are left in the deck length(deck) ## [1] 206"},{"path":"https://monasharp.github.io/game-package-bilbies/articles/blackjack-intro.html","id":"card_value","dir":"Articles","previous_headings":"Function Examples","what":"3. card_value()","title":"blackjack-intro","text":"Calculates total value hand, adjusting Ace 11 1 needed avoid busting:","code":"# Create a hand (example: with an Ace and an 8) hand <- c(\"A♣\", \"8♦\")  # Get the total value of the hand (example: the result should be 19 from the example) card_value(hand) ## [1] 19 # Get the value of a hand (example: with Ace downgraded to 1, 8, and 5, the result should be 14) card_value(c(\"A♣\", \"8♦\", \"5♠\")) ## [1] 14"},{"path":"https://monasharp.github.io/game-package-bilbies/articles/blackjack-intro.html","id":"player_turn","dir":"Articles","previous_headings":"Function Examples","what":"4. player_turn()","title":"blackjack-intro","text":"Simulates player’s turn, allowing choose whether hit stand. example, simulate turn always chooses stand:","code":"# Deal 2 cards to create a player hand hand <- deal_hand(deck, 2)$hand # The game usually pauses for user input to decide each move. # To automate the process, we provide a fake input function that always chooses \"stand\". player_turn(hand, deck, input_fn = function(prompt) \"s\") ## [1] Your hand: 10♣ Q♠ (Total = 20 ) ## [1] You stand at 20 ## $hand ## card[2] ## 10♣ Q♠  ##  ## $deck ## card[206] ## 10♣ Q♠ Q♣ 8♠ 9♣ 4♠ 2♣ 3♣ 6♠ Q♥ 2♦ K♥ A♥ 9♦ 4♠ 3♥ J♠ 5♣ 4♣ 6♣ 9♦ 6♥ 5♠ 7♠ 8♠ 8♦ 6♦ 7♦ 4♦ 10♠ 8♣ J♠ 5♠ A♠ 2♦ 5♥ 10♥ 5♣ K♥ 10♥ 4♥ A♠ K♥ 9♠ 6♠ 5♠ 6♦ 2♣ 3♦ 10♣ J♥ 10♦ K♦ 10♦ 3♠ 2♦ K♦ 10♠ 5♦ 5♣ 3♠ K♠ 2♣ K♠ 3♣ 4♣ 2♥ Q♣ K♣ A♥ 9♠ 2♥ 7♦ Q♠ J♣ 10♦ A♠ 7♣ 8♦ A♦ 5♦ J♥ 5♥ J♦ Q♠ Q♥ J♦ 8♠ J♥ J♦ 5♦ 8♥ 9♥ K♣ 2♠ 8♠ 8♥ 6♠ 9♠ 2♠ K♣ 7♣ 10♥ 2♥ K♥ 3♦ K♠ K♦ A♣ 4♣ 7♥ Q♥ 10♠ K♣ 10♥ Q♣ 2♠ A♦ 8♦ 7♣ 4♠ 3♥ J♣ Q♠ A♦ Q♦ 6♥ Q♦ 2♣ 3♥ 6♦ 3♠ 7♠ 4♦ 3♥ Q♥ J♦ 8♥ Q♦ 3♦ 5♠ A♣ 6♠ 3♣ 9♦ 6♦ J♠ J♣ 6♥ 7♥ 5♣ 7♥ 9♥ J♠ 3♣ A♣ 6♣ 4♠ 8♣ 7♦ J♥ Q♦ 4♥ 10♠ 3♦ A♥ A♣ 3♠ 8♣ 9♦ 4♥ A♥ 7♠ 4♣ 9♣ 6♥ 8♦ 4♦ 2♠ 9♥ 5♦ 5♥ K♠ 6♣ K♦ 4♥ 8♣ 9♠ 2♥ 9♣ Q♣ 8♥ 4♦ 7♠ 10♣ 7♦ J♣ 2♦ 7♣ 10♣ 9♥ 6♣ A♠ A♦ 7♥ 10♦  ##  ## $total ## [1] 20"},{"path":"https://monasharp.github.io/game-package-bilbies/articles/blackjack-intro.html","id":"auto_player_turn","dir":"Articles","previous_headings":"Function Examples","what":"5. auto_player_turn()","title":"blackjack-intro","text":"Automatically draws cards threshold:","code":"# Deal 2 cards to create a player hand hand <- deal_hand(deck, 2)$hand  # Simulate an automatic player turn with a threshold of 17 result <- auto_player_turn(hand, deck, threshold = 17)  # Show the final hand after the turn result$hand ## card[2] ## 10♣ Q♠ # Show the total value of the final hand result$total ## [1] 20"},{"path":"https://monasharp.github.io/game-package-bilbies/articles/blackjack-intro.html","id":"dealer_turn","dir":"Articles","previous_headings":"Function Examples","what":"6. dealer_turn()","title":"blackjack-intro","text":"Simulates dealer’s turn, following standard rules:","code":"# Deal 2 cards to create the dealer's starting hand hand <- deal_hand(deck, 2)$hand  # Simulate the dealer's turn result <- dealer_turn(hand, deck) ## [1] Dealer's hand: 10♣ Q♠ Total: 20 # Show the dealer's final hand result$hand ## card[2] ## 10♣ Q♠ # Show the total value of the dealer's hand result$total ## [1] 20"},{"path":"https://monasharp.github.io/game-package-bilbies/articles/blackjack-intro.html","id":"dealer_turn_smart","dir":"Articles","previous_headings":"Function Examples","what":"7. dealer_turn_smart()","title":"blackjack-intro","text":"Simulates dealer’s turn smart strategy, considering player’s hand:","code":"# Deal 2 cards for the dealer's starting hand dealer_hand <- deal_hand(deck, 2)$hand  # Set a fixed player hand for comparison player_hand <- c(\"10♦\", \"8♣\")  # Simulate the dealer's turn using a strategy that reacts to the player's hand dealer_turn_smart(dealer_hand, player_hand, deck) ## $hand ## card[2] ## 10♣ Q♠  ##  ## $deck ## card[206] ## 10♣ Q♠ Q♣ 8♠ 9♣ 4♠ 2♣ 3♣ 6♠ Q♥ 2♦ K♥ A♥ 9♦ 4♠ 3♥ J♠ 5♣ 4♣ 6♣ 9♦ 6♥ 5♠ 7♠ 8♠ 8♦ 6♦ 7♦ 4♦ 10♠ 8♣ J♠ 5♠ A♠ 2♦ 5♥ 10♥ 5♣ K♥ 10♥ 4♥ A♠ K♥ 9♠ 6♠ 5♠ 6♦ 2♣ 3♦ 10♣ J♥ 10♦ K♦ 10♦ 3♠ 2♦ K♦ 10♠ 5♦ 5♣ 3♠ K♠ 2♣ K♠ 3♣ 4♣ 2♥ Q♣ K♣ A♥ 9♠ 2♥ 7♦ Q♠ J♣ 10♦ A♠ 7♣ 8♦ A♦ 5♦ J♥ 5♥ J♦ Q♠ Q♥ J♦ 8♠ J♥ J♦ 5♦ 8♥ 9♥ K♣ 2♠ 8♠ 8♥ 6♠ 9♠ 2♠ K♣ 7♣ 10♥ 2♥ K♥ 3♦ K♠ K♦ A♣ 4♣ 7♥ Q♥ 10♠ K♣ 10♥ Q♣ 2♠ A♦ 8♦ 7♣ 4♠ 3♥ J♣ Q♠ A♦ Q♦ 6♥ Q♦ 2♣ 3♥ 6♦ 3♠ 7♠ 4♦ 3♥ Q♥ J♦ 8♥ Q♦ 3♦ 5♠ A♣ 6♠ 3♣ 9♦ 6♦ J♠ J♣ 6♥ 7♥ 5♣ 7♥ 9♥ J♠ 3♣ A♣ 6♣ 4♠ 8♣ 7♦ J♥ Q♦ 4♥ 10♠ 3♦ A♥ A♣ 3♠ 8♣ 9♦ 4♥ A♥ 7♠ 4♣ 9♣ 6♥ 8♦ 4♦ 2♠ 9♥ 5♦ 5♥ K♠ 6♣ K♦ 4♥ 8♣ 9♠ 2♥ 9♣ Q♣ 8♥ 4♦ 7♠ 10♣ 7♦ J♣ 2♦ 7♣ 10♣ 9♥ 6♣ A♠ A♦ 7♥ 10♦  ##  ## $total ## [1] 20"},{"path":"https://monasharp.github.io/game-package-bilbies/articles/blackjack-intro.html","id":"play_blackjack","dir":"Articles","previous_headings":"Function Examples","what":"8. play_blackjack()","title":"blackjack-intro","text":"Simulates full game Blackjack involving player dealer turns. game supports single multiple players. example, demonstrate game 1 player versus dealer.","code":"# The game usually pauses for user input to decide each move. # To automate the process, we provide a fake input function that always chooses \"stand\". play_blackjack(input_fn = function(prompt) \"s\") ## [1] Dealer shows: 6♠ ? ## [1] Your hand: 8♣ 9♦ (Total = 17 ) ## [1] You stand at 17 ## [1] Dealer's hand: 6♠ 2♥ 2♥ Q♥ Total: 20 ## $player_hand ## card[2] ## 8♣ 9♦  ##  ## $dealer_hand ## card[4] ## 6♠ 2♥ 2♥ Q♥  ##  ## $player_score ## [1] 17 ##  ## $dealer_score ## [1] 20 ##  ## $result ## [1] \"Dealer wins\""},{"path":"https://monasharp.github.io/game-package-bilbies/articles/blackjack-intro.html","id":"play_blackjack_multi","dir":"Articles","previous_headings":"Function Examples","what":"9. play_blackjack_multi()","title":"blackjack-intro","text":"Simulates full round Blackjack multiple players competing dealer. game supports unlimited number players. example, demonstrate game 2 player:","code":"# The game usually pauses for user input to decide each move. # To automate the process, we provide a fake input function that always chooses \"stand\". play_blackjack(input_fn = function(prompt) \"s\") ## [1] Dealer shows: 10♦ ? ## [1] Your hand: 2♣ 7♦ (Total = 9 ) ## [1] You stand at 9 ## [1] Dealer's hand: 10♦ 6♦ 5♣ Total: 21 ## $player_hand ## card[2] ## 2♣ 7♦  ##  ## $dealer_hand ## card[3] ## 10♦ 6♦ 5♣  ##  ## $player_score ## [1] 9 ##  ## $dealer_score ## [1] 21 ##  ## $result ## [1] \"Dealer wins\""},{"path":"https://monasharp.github.io/game-package-bilbies/articles/blackjack-intro.html","id":"simulation_blackjack","dir":"Articles","previous_headings":"Function Examples","what":"10. simulation_blackjack()","title":"blackjack-intro","text":"Simulates multiple automated rounds Blackjack:","code":"# Simulate 100 rounds of Blackjack using a fixed player strategy (hit until reaching 16) simulation_blackjack(threshold = 16, num_rounds = 100) ## Outcome ## Lose Push  Win  ##  522  115  363"},{"path":"https://monasharp.github.io/game-package-bilbies/articles/blackjack-intro.html","id":"create_suffle_deck","dir":"Articles","previous_headings":"Function Examples","what":"11. create_suffle_deck()","title":"blackjack-intro","text":"Create full shuffled Blackjack shoe inspect first card’s properties:","code":"# Create a shuffled deck  deck <- create_shuffled_deck()  # View the first card deck[1] ## card[1] ## 4♣ # Check card properties card_name(deck[1]) ## [1] \"4♣\" card_rank(deck[1]) ## [1] \"Four\" card_symbol(deck[1]) ## [1] \"♣\" card_suit(deck[1]) ## [1] \"Club\" card_is_face(deck[1]) ## [1] FALSE card_value(deck[1]) ## [1] 4"},{"path":"https://monasharp.github.io/game-package-bilbies/articles/blackjack-intro.html","id":"package-design-decisions","dir":"Articles","previous_headings":"","what":"Package Design Decisions","title":"blackjack-intro","text":"detailed discussion internal design choices, integration C++ {vctrs} package, well future development plans, please refer [] section.","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andy Tran. Maintainer, author. Yiran Yao. Author. Rong Xu. Author.","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Tran , Yao Y, Xu R (2025). blackjack: Multiplayer Blackjack Game. R package version 0.1.0, https://monasharp.github.io/game-package-bilbies.","code":"@Manual{,   title = {blackjack: Multiplayer Blackjack Game},   author = {Andy Tran and Yiran Yao and Rong Xu},   year = {2025},   note = {R package version 0.1.0},   url = {https://monasharp.github.io/game-package-bilbies}, }"},{"path":"https://monasharp.github.io/game-package-bilbies/index.html","id":"blackjack","dir":"","previous_headings":"","what":"Blackjack","title":"Multiplayer Blackjack Game","text":"Welcome World Blackjack Blackjack classic card game objective achieve hand total closer 21 dealer’s without exceeding . player begins two cards may choose “hit” draw additional cards “stand” keep current hand. Number cards retain face value, face cards worth 10, Aces count either 1 11. hand exceeds 21, results bust player loses. dealer must draw reaching least 17. starting hand Ace 10-value card called blackjack typically earns bonus. blackjack Package Overview blackjack package offers interactive environment simulating Blackjack card game R. Designed flexibility mind, supports user-controlled gameplay automated strategies, enabling solo multiplayer sessions. package captures realistic game dynamics—dealer logic, card flow scoring, making suitable simulating strategies analysing probabilistic outcomes.","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Multiplayer Blackjack Game","text":"install development version blackjack package, run following commands R: repository private prefer local setup, can clone using Git. First, run git clone download repository computer. , R, set working directory cloned folder install package :","code":"install.packages(\"devtools\") devtools::install_github(\"MonashARP/game-package-bilbies\") install.packages(\"devtools\") devtools::install()"},{"path":[]},{"path":"https://monasharp.github.io/game-package-bilbies/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Multiplayer Blackjack Game","text":"basic examples show use package.","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/index.html","id":"id_️-quick-start","dir":"","previous_headings":"Example","what":"🏎️ Quick Start","title":"Multiplayer Blackjack Game","text":"Start creating shuffled deck deal hand cards. example shows generate standard 52-card deck, draw two cards, inspect hand remaining deck.","code":"# Make sure to load the package!  library(blackjack)   # Creates a full standard deck of 52 cards deck <- create_shuffled_deck()  # Simulate drawing cards from the top of a deck hand_result <- deal_hand(deck, n = 2)  # `hand_result` returns result of both card dealt and remaining deck  hand_result$hand    hand_result$deck"},{"path":"https://monasharp.github.io/game-package-bilbies/index.html","id":"id_-game-on","dir":"","previous_headings":"Example","what":"🏁 Game On!","title":"Multiplayer Blackjack Game","text":"basic example shows use package play full round Blackjack. game prompts input play, allowing hit, stand, double , split, quit depending balance. also supports several players, taking turn dealer using standard Blackjack rules. simulations automated strategy testing, can let computer make decisions using auto_player_turn() function. chooses whether hit stand based value current hand.","code":"# Specify the initial bet and the number of decks to use play_blackjack(bet = 100, n_decks = 4)  # Test strategy across multiple players  play_blackjack_multi(num_players = 3, bet = 50) auto_player_turn(hand = c(\"8♦\", \"4♠\"), deck = create_shuffled_deck())"},{"path":"https://monasharp.github.io/game-package-bilbies/index.html","id":"id_️-the-cards","dir":"","previous_headings":"Example","what":"♠️ The Cards","title":"Multiplayer Blackjack Game","text":"can use following functions inspect different properties (name, rank, symbol, value whether ’s face card) card. functions make easy inspect, sort, filter cards building game logic debugging game.","code":"deck <- create_shuffled_deck() card <- deck[1]  card_name(card)     card_rank(card)   card_symbol(card)   card_is_face(card)  card_value(card)"},{"path":"https://monasharp.github.io/game-package-bilbies/index.html","id":"learn-more","dir":"","previous_headings":"Example","what":"Learn More","title":"Multiplayer Blackjack Game","text":"explore full functionality blackjack package, can view documentation function directly R typing ? console. Full documentation available pkgdown site.","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/index.html","id":"team-contributions","dir":"","previous_headings":"Example","what":"Team Contributions","title":"Multiplayer Blackjack Game","text":"Game Package Part1 Andy Tran: Team leader, built functions extension single multiple players (WIP) Rong Xu: Implemented core functions, Built unit tests (WIP) Yiran Yao: Supported building functions unit tests; Vignette readme drafts; Modified roxygen comments. Game Package Part2 Andy Tran: Built main vctr logic functions; vctr related unit test, documentation design vignette. Rong Xu: Rendered function examples; Built unit tests; Ensured S3 method consistency; Resolved R CMD check issues; Participated building vctrs record class. Yiran Yao: C++ programming deal_hand(); Refinement introduction vignette readme; Debugging errors checks.","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/index.html","id":"license","dir":"","previous_headings":"Example","what":"License","title":"Multiplayer Blackjack Game","text":"package licensed GNU General Public License v3.0 later. See LICENSE file details.","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/index.html","id":"usage-of-generative-ai","dir":"","previous_headings":"Example","what":"Usage of Generative AI","title":"Multiplayer Blackjack Game","text":"leveraged Generative AI project 3 main aspects, detailed usage can found vignette. Perform logical checks building functions. Identify errors offer suggestions fixing . Review refine grammar clarity correctness.","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/auto_player_turn.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatic Player Turn Logic — auto_player_turn","title":"Automatic Player Turn Logic — auto_player_turn","text":"function simulates player's turn Blackjack game. player keeps drawing cards total hand value reaches exceeds specific threshold.","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/auto_player_turn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatic Player Turn Logic — auto_player_turn","text":"","code":"auto_player_turn(player_hand, deck, threshold)"},{"path":"https://monasharp.github.io/game-package-bilbies/reference/auto_player_turn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatic Player Turn Logic — auto_player_turn","text":"player_hand vector cards representing player's hand. deck vector cards representing remaining deck. threshold numeric value representing threshold player stop drawing cards.","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/auto_player_turn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatic Player Turn Logic — auto_player_turn","text":"list containing: hand updated player hand drawing cards. deck updated deck removing drawn cards. total final total value player's hand.","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/auto_player_turn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Automatic Player Turn Logic — auto_player_turn","text":"Work basically dealer_turn threshold input user instead fixed 17 rule. Call deal_hand() draw card use logic deal_turn well","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/auto_player_turn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automatic Player Turn Logic — auto_player_turn","text":"","code":"# 1) Start with a fresh shuffled deck: deck <- create_shuffled_deck()  # 2) Deal two cards to form the initial player hand: top_two <- deal_hand(deck, 2) hand <- top_two$hand deck <- top_two$deck  # 3) Now call auto_player_turn() with threshold = 17: auto_player_turn(player_hand = hand, deck = deck, threshold = 17) #> $hand #> card[3] #> 5♥ 9♣ 10♣  #>  #> $deck #> card[205] #> Q♠ Q♣ 8♠ 9♣ 4♠ 2♣ 3♣ 6♠ Q♥ 2♦ K♥ A♥ 9♦ 4♠ 3♥ J♠ 5♣ 4♣ 6♣ 9♦ 6♥ 5♠ 7♠ 8♠ 8♦ 6♦ 7♦ 4♦ 10♠ 8♣ J♠ 5♠ A♠ 2♦ 5♥ 10♥ 5♣ K♥ 10♥ 4♥ A♠ K♥ 9♠ 6♠ 5♠ 6♦ 2♣ 3♦ 10♣ J♥ 10♦ K♦ 10♦ 3♠ 2♦ K♦ 10♠ 5♦ 5♣ 3♠ K♠ 2♣ K♠ 3♣ 4♣ 2♥ Q♣ K♣ A♥ 9♠ 2♥ 7♦ Q♠ J♣ 10♦ A♠ 7♣ 8♦ A♦ 5♦ J♥ 5♥ J♦ Q♠ Q♥ J♦ 8♠ J♥ J♦ 5♦ 8♥ 9♥ K♣ 2♠ 8♠ 8♥ 6♠ 9♠ 2♠ K♣ 7♣ 10♥ 2♥ K♥ 3♦ K♠ K♦ A♣ 4♣ 7♥ Q♥ 10♠ K♣ 10♥ Q♣ 2♠ A♦ 8♦ 7♣ 4♠ 3♥ J♣ Q♠ A♦ Q♦ 6♥ Q♦ 2♣ 3♥ 6♦ 3♠ 7♠ 4♦ 3♥ Q♥ J♦ 8♥ Q♦ 3♦ 5♠ A♣ 6♠ 3♣ 9♦ 6♦ J♠ J♣ 6♥ 7♥ 5♣ 7♥ 9♥ J♠ 3♣ A♣ 6♣ 4♠ 8♣ 7♦ J♥ Q♦ 4♥ 10♠ 3♦ A♥ A♣ 3♠ 8♣ 9♦ 4♥ A♥ 7♠ 4♣ 9♣ 6♥ 8♦ 4♦ 2♠ 9♥ 5♦ 5♥ K♠ 6♣ K♦ 4♥ 8♣ 9♠ 2♥ 9♣ Q♣ 8♥ 4♦ 7♠ 10♣ 7♦ J♣ 2♦ 7♣ 10♣ 9♥ 6♣ A♠ A♦ 7♥ 10♦  #>  #> $total #> [1] 24 #>"},{"path":"https://monasharp.github.io/game-package-bilbies/reference/blackjack-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Blackjack Package — blackjack-package","title":"Blackjack Package — blackjack-package","text":"`blackjack` package provides tools simulate game Blackjack R. supports single multiplayer modes, dealer logic, strategy testing.","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/card_is_face.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine if Cards Are Face Cards — card_is_face","title":"Determine if Cards Are Face Cards — card_is_face","text":"`card_is_face()` checks whether card vctrs \"card\" record face card (Jack, Queen, King). applied plain character vector, returns character vector unchanged, function specifically designed vctrs \"card\" records.","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/card_is_face.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine if Cards Are Face Cards — card_is_face","text":"","code":"card_is_face(x, ...)"},{"path":"https://monasharp.github.io/game-package-bilbies/reference/card_is_face.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine if Cards Are Face Cards — card_is_face","text":"x `card` object (created `create_shuffled_deck()`) character vector card names (e.g., `\"♠\"`, `\"J♥\"`). ... Additional arguments passed methods. used. `x` `card`, returns logical vector indicating face cards. `x` character, returns unchanged.","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/card_is_face.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine if Cards Are Face Cards — card_is_face","text":"Depending method: card logical vector (TRUE face card). character input character vector, unchanged.","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/card_is_face.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine if Cards Are Face Cards — card_is_face","text":"- Specifically designed objects class \"card\" (vctrs record create_shuffled_deck()). - card_is_face.card(x) extracts is_face field via vctrs::field(x, \"is_face\"). - card_is_face.character(x) returns x unchanged. - card_is_face.default(x) throws error input \"card\" character.","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/card_is_face.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine if Cards Are Face Cards — card_is_face","text":"","code":"deck <- create_shuffled_deck() card_is_face(deckcard_is_face(c(\"J♣\", \"9♦\", \"K♠\"))  # Character input: unchanged #> [1] \"J♣\" \"9♦\" \"K♠\""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/card_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Card Names — card_name","title":"Extract Card Names — card_name","text":"`card_name()` retrieves name field vctrs \"card\" record (class \"card\"). applied plain character vector, returns vector unchanged. function specifically designed work vctrs \"card\" objects created create_shuffled_deck().","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/card_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Card Names — card_name","text":"","code":"card_name(x, ...)"},{"path":"https://monasharp.github.io/game-package-bilbies/reference/card_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Card Names — card_name","text":"x `card` object character vector card names. ... Additional arguments passed methods. used.","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/card_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Card Names — card_name","text":"Depending method: card character vector containing `name` field card. character input character vector, unchanged.","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/card_name.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract Card Names — card_name","text":"- objects class \"card\", card_name.card(x) extracts name field   via vctrs::field(x, \"name\"), returning character vector card names (e.g., \"♠\"). - x character vector, card_name.character(x) simply returns x unchanged. - class, card_name.default(x) throws error.","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/card_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Card Names — card_name","text":"","code":"deck <- create_shuffled_deck() card_name(deck) #>   [1] \"8♦\"  \"9♣\"  \"J♥\"  \"7♣\"  \"J♦\"  \"8♥\"  \"A♠\"  \"J♠\"  \"Q♠\"  \"5♥\"  \"Q♠\"  \"3♣\"  #>  [13] \"5♠\"  \"8♥\"  \"8♣\"  \"A♦\"  \"10♣\" \"10♣\" \"2♦\"  \"2♠\"  \"2♣\"  \"9♣\"  \"3♥\"  \"2♥\"  #>  [25] \"A♣\"  \"3♣\"  \"7♥\"  \"5♠\"  \"6♠\"  \"8♦\"  \"3♥\"  \"K♦\"  \"9♥\"  \"2♦\"  \"8♠\"  \"K♣\"  #>  [37] \"J♥\"  \"10♣\" \"4♣\"  \"4♦\"  \"J♦\"  \"K♣\"  \"7♠\"  \"3♠\"  \"J♠\"  \"5♠\"  \"8♣\"  \"A♥\"  #>  [49] \"7♦\"  \"K♠\"  \"9♦\"  \"9♥\"  \"Q♦\"  \"Q♥\"  \"9♣\"  \"4♦\"  \"4♠\"  \"6♦\"  \"J♥\"  \"3♠\"  #>  [61] \"6♦\"  \"8♥\"  \"6♣\"  \"3♦\"  \"2♣\"  \"9♠\"  \"10♦\" \"8♦\"  \"2♠\"  \"Q♣\"  \"2♦\"  \"4♣\"  #>  [73] \"9♥\"  \"4♥\"  \"A♦\"  \"9♣\"  \"J♠\"  \"3♥\"  \"6♠\"  \"5♦\"  \"3♣\"  \"7♠\"  \"6♥\"  \"10♠\" #>  [85] \"Q♦\"  \"J♦\"  \"K♥\"  \"10♥\" \"A♣\"  \"K♦\"  \"5♦\"  \"8♠\"  \"K♣\"  \"4♠\"  \"7♦\"  \"2♥\"  #>  [97] \"7♥\"  \"A♥\"  \"9♠\"  \"A♥\"  \"10♥\" \"K♠\"  \"A♠\"  \"2♣\"  \"7♠\"  \"6♥\"  \"K♥\"  \"6♦\"  #> [109] \"10♣\" \"4♣\"  \"5♥\"  \"10♦\" \"A♠\"  \"7♣\"  \"5♥\"  \"6♣\"  \"6♠\"  \"Q♥\"  \"6♣\"  \"8♥\"  #> [121] \"6♠\"  \"5♣\"  \"Q♥\"  \"10♥\" \"Q♣\"  \"7♣\"  \"Q♠\"  \"9♦\"  \"A♣\"  \"4♦\"  \"8♠\"  \"3♣\"  #> [133] \"2♥\"  \"5♥\"  \"9♦\"  \"10♠\" \"5♠\"  \"4♥\"  \"Q♠\"  \"4♥\"  \"9♠\"  \"8♠\"  \"2♠\"  \"6♥\"  #> [145] \"J♣\"  \"J♠\"  \"6♥\"  \"8♣\"  \"4♠\"  \"10♦\" \"5♣\"  \"J♥\"  \"5♦\"  \"3♦\"  \"J♣\"  \"A♦\"  #> [157] \"10♥\" \"4♦\"  \"Q♣\"  \"4♥\"  \"5♦\"  \"J♣\"  \"K♠\"  \"6♦\"  \"Q♦\"  \"9♥\"  \"7♣\"  \"A♠\"  #> [169] \"2♠\"  \"10♠\" \"10♠\" \"8♦\"  \"Q♦\"  \"2♦\"  \"3♥\"  \"7♥\"  \"K♦\"  \"2♥\"  \"3♠\"  \"6♣\"  #> [181] \"K♠\"  \"K♣\"  \"3♦\"  \"9♠\"  \"K♥\"  \"J♦\"  \"A♥\"  \"10♦\" \"4♣\"  \"9♦\"  \"7♦\"  \"7♦\"  #> [193] \"8♣\"  \"5♣\"  \"A♣\"  \"5♣\"  \"Q♣\"  \"J♣\"  \"K♦\"  \"Q♥\"  \"3♦\"  \"7♠\"  \"3♠\"  \"4♠\"  #> [205] \"2♣\"  \"7♥\"  \"A♦\"  \"K♥\"   card_name(c(\"A♠\", \"10♦\", \"K♥\")) #> [1] \"A♠\"  \"10♦\" \"K♥\""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/card_rank.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Card Ranks — card_rank","title":"Extract Card Ranks — card_rank","text":"`card_rank()` retrieves rank field vctrs \"card\" record (class \"card\"). applied plain character vector, returns vector unchanged. function specifically designed work vctrs \"card\" objects created create_shuffled_deck().","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/card_rank.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Card Ranks — card_rank","text":"","code":"card_rank(x, ...)"},{"path":"https://monasharp.github.io/game-package-bilbies/reference/card_rank.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Card Ranks — card_rank","text":"x `card` object character vector card ranks (e.g., \"Two\", \"Jack\"). ... Additional arguments passed methods. used.","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/card_rank.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Card Ranks — card_rank","text":"Depending method: card character vector containing `rank` field card. character input character vector, unchanged.","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/card_rank.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract Card Ranks — card_rank","text":"- objects class \"card\", card_rank.card(x) extracts rank field   via vctrs::field(x, \"rank\"), returning character vector card ranks (e.g., \"Ace\"). - x character vector, card_rank.character(x) simply returns x unchanged. - class, card_rank.default(x) throws error.","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/card_rank.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Card Ranks — card_rank","text":"","code":"deck <- create_shuffled_deck() card_rank(deck) #>   [1] \"Three\" \"Ace\"   \"Five\"  \"Four\"  \"Four\"  \"Six\"   \"Six\"   \"Queen\" \"Nine\"  #>  [10] \"Ace\"   \"Queen\" \"Ten\"   \"Two\"   \"Nine\"  \"Three\" \"Eight\" \"Ten\"   \"Ace\"   #>  [19] \"Eight\" \"Seven\" \"Queen\" \"Two\"   \"Ace\"   \"Ace\"   \"Ten\"   \"Ace\"   \"Seven\" #>  [28] \"Jack\"  \"Four\"  \"Eight\" \"Four\"  \"Ace\"   \"Jack\"  \"Nine\"  \"Two\"   \"Nine\"  #>  [37] \"Four\"  \"Two\"   \"Seven\" \"Four\"  \"Jack\"  \"King\"  \"Nine\"  \"Two\"   \"Four\"  #>  [46] \"Four\"  \"Five\"  \"Five\"  \"Four\"  \"Six\"   \"Six\"   \"Two\"   \"Nine\"  \"Eight\" #>  [55] \"Ten\"   \"Nine\"  \"Queen\" \"Eight\" \"Ace\"   \"Nine\"  \"Five\"  \"Jack\"  \"Two\"   #>  [64] \"Six\"   \"Eight\" \"Six\"   \"Two\"   \"Seven\" \"Four\"  \"King\"  \"Five\"  \"Queen\" #>  [73] \"Six\"   \"King\"  \"King\"  \"Jack\"  \"Queen\" \"Jack\"  \"Eight\" \"Ten\"   \"Three\" #>  [82] \"Jack\"  \"Nine\"  \"Queen\" \"Jack\"  \"Ten\"   \"Ace\"   \"Seven\" \"Queen\" \"Nine\"  #>  [91] \"Eight\" \"Four\"  \"Four\"  \"Seven\" \"Queen\" \"King\"  \"Three\" \"King\"  \"Jack\"  #> [100] \"Ace\"   \"Five\"  \"Five\"  \"Ten\"   \"Three\" \"Ten\"   \"Eight\" \"Queen\" \"King\"  #> [109] \"Ten\"   \"Nine\"  \"Ace\"   \"Seven\" \"Four\"  \"Three\" \"Nine\"  \"Jack\"  \"King\"  #> [118] \"Ace\"   \"Three\" \"Five\"  \"Queen\" \"Eight\" \"Jack\"  \"Jack\"  \"Five\"  \"Eight\" #> [127] \"Six\"   \"Five\"  \"Six\"   \"Two\"   \"Four\"  \"Three\" \"Two\"   \"Jack\"  \"Seven\" #> [136] \"King\"  \"Ten\"   \"Five\"  \"Nine\"  \"Ace\"   \"Two\"   \"Six\"   \"King\"  \"Eight\" #> [145] \"Queen\" \"Ten\"   \"King\"  \"King\"  \"King\"  \"Two\"   \"Three\" \"Eight\" \"Ten\"   #> [154] \"Two\"   \"Ten\"   \"Nine\"  \"Jack\"  \"Three\" \"Four\"  \"King\"  \"Eight\" \"Jack\"  #> [163] \"Three\" \"Three\" \"Six\"   \"Ten\"   \"Six\"   \"Six\"   \"Two\"   \"Seven\" \"Seven\" #> [172] \"Queen\" \"Ten\"   \"Seven\" \"Six\"   \"Queen\" \"Eight\" \"Ace\"   \"Five\"  \"Six\"   #> [181] \"Four\"  \"Three\" \"Seven\" \"Queen\" \"Two\"   \"Nine\"  \"Eight\" \"Five\"  \"Three\" #> [190] \"Three\" \"Five\"  \"Ten\"   \"Five\"  \"Two\"   \"Seven\" \"Nine\"  \"Jack\"  \"King\"  #> [199] \"King\"  \"Six\"   \"Five\"  \"Queen\" \"Three\" \"Seven\" \"Ace\"   \"Ace\"   \"Seven\" #> [208] \"Seven\"  card_rank(c(\"Queen\", \"Two\", \"Ace\")) #> [1] \"Queen\" \"Two\"   \"Ace\""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/card_suit.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Card Suits — card_suit","title":"Extract Card Suits — card_suit","text":"`card_suit()` retrieves suit field vctrs \"card\" record (class \"card\"). applied plain character vector, returns vector unchanged. function specifically designed work vctrs \"card\" objects created create_shuffled_deck().","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/card_suit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Card Suits — card_suit","text":"","code":"card_suit(x, ...)"},{"path":"https://monasharp.github.io/game-package-bilbies/reference/card_suit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Card Suits — card_suit","text":"x `card` object character vector card suits (e.g., \"Spade\", \"Heart\"). ... Additional arguments passed methods. used.","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/card_suit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Card Suits — card_suit","text":"card character vector containing `suit` field card. character input character vector, unchanged.","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/card_suit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract Card Suits — card_suit","text":"- objects class \"card\", card_suit.card(x) extracts suit field   via vctrs::field(x, \"suit\"), returning character vector card suits (e.g., \"Hearts\"). - x character vector, card_suit.character(x) returns x unchanged. - types, card_suit.default(x) throws error.","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/card_suit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Card Suits — card_suit","text":"","code":"deck <- create_shuffled_deck() card_suit(deck) #>   [1] \"Club\"    \"Diamond\" \"Spade\"   \"Heart\"   \"Heart\"   \"Heart\"   \"Heart\"   #>   [8] \"Club\"    \"Club\"    \"Heart\"   \"Club\"    \"Heart\"   \"Heart\"   \"Diamond\" #>  [15] \"Diamond\" \"Diamond\" \"Heart\"   \"Club\"    \"Diamond\" \"Heart\"   \"Heart\"   #>  [22] \"Diamond\" \"Diamond\" \"Heart\"   \"Heart\"   \"Club\"    \"Heart\"   \"Diamond\" #>  [29] \"Spade\"   \"Spade\"   \"Spade\"   \"Spade\"   \"Heart\"   \"Spade\"   \"Club\"    #>  [36] \"Spade\"   \"Diamond\" \"Club\"    \"Diamond\" \"Spade\"   \"Club\"    \"Diamond\" #>  [43] \"Heart\"   \"Heart\"   \"Spade\"   \"Diamond\" \"Heart\"   \"Spade\"   \"Spade\"   #>  [50] \"Spade\"   \"Heart\"   \"Spade\"   \"Spade\"   \"Club\"    \"Spade\"   \"Club\"    #>  [57] \"Spade\"   \"Spade\"   \"Club\"    \"Diamond\" \"Club\"    \"Diamond\" \"Club\"    #>  [64] \"Diamond\" \"Diamond\" \"Spade\"   \"Heart\"   \"Club\"    \"Diamond\" \"Heart\"   #>  [71] \"Spade\"   \"Heart\"   \"Club\"    \"Club\"    \"Club\"    \"Spade\"   \"Club\"    #>  [78] \"Spade\"   \"Spade\"   \"Spade\"   \"Heart\"   \"Heart\"   \"Spade\"   \"Club\"    #>  [85] \"Heart\"   \"Diamond\" \"Club\"    \"Club\"    \"Diamond\" \"Club\"    \"Diamond\" #>  [92] \"Diamond\" \"Heart\"   \"Heart\"   \"Diamond\" \"Club\"    \"Spade\"   \"Heart\"   #>  [99] \"Diamond\" \"Spade\"   \"Club\"    \"Spade\"   \"Club\"    \"Spade\"   \"Spade\"   #> [106] \"Heart\"   \"Club\"    \"Club\"    \"Diamond\" \"Diamond\" \"Club\"    \"Diamond\" #> [113] \"Heart\"   \"Diamond\" \"Club\"    \"Heart\"   \"Spade\"   \"Heart\"   \"Heart\"   #> [120] \"Heart\"   \"Heart\"   \"Spade\"   \"Club\"    \"Diamond\" \"Diamond\" \"Spade\"   #> [127] \"Club\"    \"Heart\"   \"Diamond\" \"Club\"    \"Diamond\" \"Club\"    \"Heart\"   #> [134] \"Heart\"   \"Diamond\" \"Heart\"   \"Diamond\" \"Heart\"   \"Spade\"   \"Diamond\" #> [141] \"Diamond\" \"Heart\"   \"Heart\"   \"Club\"    \"Heart\"   \"Club\"    \"Spade\"   #> [148] \"Heart\"   \"Club\"    \"Club\"    \"Diamond\" \"Club\"    \"Spade\"   \"Spade\"   #> [155] \"Heart\"   \"Diamond\" \"Spade\"   \"Club\"    \"Spade\"   \"Diamond\" \"Spade\"   #> [162] \"Diamond\" \"Spade\"   \"Spade\"   \"Spade\"   \"Diamond\" \"Club\"    \"Club\"    #> [169] \"Club\"    \"Club\"    \"Spade\"   \"Spade\"   \"Diamond\" \"Heart\"   \"Club\"    #> [176] \"Heart\"   \"Diamond\" \"Spade\"   \"Spade\"   \"Diamond\" \"Diamond\" \"Heart\"   #> [183] \"Diamond\" \"Spade\"   \"Heart\"   \"Club\"    \"Heart\"   \"Club\"    \"Diamond\" #> [190] \"Diamond\" \"Diamond\" \"Heart\"   \"Diamond\" \"Diamond\" \"Heart\"   \"Club\"    #> [197] \"Spade\"   \"Spade\"   \"Club\"    \"Diamond\" \"Spade\"   \"Club\"    \"Club\"    #> [204] \"Club\"    \"Heart\"   \"Diamond\" \"Spade\"   \"Spade\"    card_suit(c(\"Hearts\", \"Spades\")) #> [1] \"Hearts\" \"Spades\""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/card_symbol.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Card Suit Symbols — card_symbol","title":"Extract Card Suit Symbols — card_symbol","text":"`card_symbol()` retrieves suit_symbol field vctrs \"card\" record (class \"card\"). applied plain character vector, returns vector unchanged. function specifically designed work vctrs \"card\" objects created create_shuffled_deck().","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/card_symbol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Card Suit Symbols — card_symbol","text":"","code":"card_symbol(x, ...)"},{"path":"https://monasharp.github.io/game-package-bilbies/reference/card_symbol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Card Suit Symbols — card_symbol","text":"x `card` object (created `create_shuffled_deck()`) character vector suit symbols (e.g., \"♠\", \"♥\"). ... Additional arguments passed methods. used.","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/card_symbol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Card Suit Symbols — card_symbol","text":"Depending method: card character vector containing `suit_symbol` field card. character input character vector, unchanged.","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/card_symbol.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract Card Suit Symbols — card_symbol","text":"- objects class \"card\", card_symbol.card(x) extracts suit_symbol field   via vctrs::field(x, \"suit_symbol\"), returning character vector card suit symbols   (e.g., \"♠\", \"♥\", \"♦\"). - x character vector, card_symbol.character(x) simply returns x unchanged. - class, card_symbol.default(x) throws error.","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/card_symbol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Card Suit Symbols — card_symbol","text":"","code":"deck <- create_shuffled_deck() card_symbol(deck) #>   [1] \"♠\" \"♥\" \"♠\" \"♣\" \"♥\" \"♥\" \"♦\" \"♦\" \"♠\" \"♥\" \"♥\" \"♠\" \"♠\" \"♣\" \"♥\" \"♦\" \"♠\" \"♣\" #>  [19] \"♠\" \"♦\" \"♣\" \"♥\" \"♠\" \"♣\" \"♦\" \"♦\" \"♠\" \"♦\" \"♣\" \"♠\" \"♣\" \"♥\" \"♠\" \"♥\" \"♦\" \"♣\" #>  [37] \"♦\" \"♥\" \"♣\" \"♦\" \"♥\" \"♦\" \"♥\" \"♠\" \"♣\" \"♠\" \"♥\" \"♣\" \"♣\" \"♥\" \"♣\" \"♣\" \"♥\" \"♣\" #>  [55] \"♠\" \"♠\" \"♠\" \"♠\" \"♠\" \"♥\" \"♣\" \"♥\" \"♥\" \"♠\" \"♣\" \"♥\" \"♥\" \"♦\" \"♦\" \"♥\" \"♥\" \"♠\" #>  [73] \"♠\" \"♣\" \"♠\" \"♥\" \"♦\" \"♣\" \"♣\" \"♣\" \"♣\" \"♣\" \"♦\" \"♦\" \"♦\" \"♥\" \"♠\" \"♠\" \"♠\" \"♥\" #>  [91] \"♦\" \"♥\" \"♠\" \"♠\" \"♠\" \"♥\" \"♥\" \"♣\" \"♦\" \"♦\" \"♠\" \"♠\" \"♠\" \"♦\" \"♥\" \"♠\" \"♠\" \"♥\" #> [109] \"♣\" \"♥\" \"♣\" \"♥\" \"♣\" \"♠\" \"♦\" \"♦\" \"♣\" \"♣\" \"♦\" \"♥\" \"♦\" \"♦\" \"♠\" \"♣\" \"♥\" \"♦\" #> [127] \"♠\" \"♣\" \"♣\" \"♦\" \"♥\" \"♠\" \"♠\" \"♦\" \"♣\" \"♥\" \"♦\" \"♦\" \"♥\" \"♣\" \"♦\" \"♥\" \"♥\" \"♣\" #> [145] \"♠\" \"♦\" \"♥\" \"♦\" \"♦\" \"♠\" \"♥\" \"♣\" \"♣\" \"♦\" \"♣\" \"♦\" \"♠\" \"♣\" \"♠\" \"♦\" \"♦\" \"♥\" #> [163] \"♣\" \"♦\" \"♣\" \"♠\" \"♠\" \"♥\" \"♥\" \"♦\" \"♣\" \"♣\" \"♦\" \"♠\" \"♥\" \"♠\" \"♠\" \"♥\" \"♦\" \"♣\" #> [181] \"♠\" \"♣\" \"♦\" \"♥\" \"♥\" \"♣\" \"♣\" \"♣\" \"♠\" \"♣\" \"♣\" \"♠\" \"♠\" \"♦\" \"♥\" \"♦\" \"♦\" \"♥\" #> [199] \"♦\" \"♠\" \"♦\" \"♣\" \"♦\" \"♥\" \"♦\" \"♥\" \"♦\" \"♣\"  card_symbol(c(\"♠\", \"♦\", \"♣\")) #> [1] \"♠\" \"♦\" \"♣\""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/card_value.html","id":null,"dir":"Reference","previous_headings":"","what":"Score a Blackjack Hand — card_value","title":"Score a Blackjack Hand — card_value","text":"Calculates total value Blackjack hand. Aces worth 11 points default, total exceeds 21, Aces downgraded 1 point needed avoid busting.","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/card_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Score a Blackjack Hand — card_value","text":"","code":"card_value(x, ...)"},{"path":"https://monasharp.github.io/game-package-bilbies/reference/card_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Score a Blackjack Hand — card_value","text":"x character vector card names (e.g., `\"♠\"`, `\"10♥\"`, `\"J♦\"`), `card` object created `create_shuffled_deck()`. ... Additional arguments passed methods. used.","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/card_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Score a Blackjack Hand — card_value","text":"single numeric value representing total hand score.","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/card_value.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Score a Blackjack Hand — card_value","text":"","code":"card_value(c(\"10♠\", \"A♥\"))        # 21 #> [1] 21 card_value(c(\"A♠\", \"A♦\", \"9♣\"))   # 21 (11 + 1 + 9) #> [1] 21 card_value(c(\"K♣\", \"7♦\", \"6♥\"))   # 23 (bust) #> [1] 23 card_value(c(\"5♣\", \"3♦\", \"3♥\"))   # 11 #> [1] 11"},{"path":"https://monasharp.github.io/game-package-bilbies/reference/create_shuffled_deck.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Shuffled Blackjack Shoe — create_shuffled_deck","title":"Create a Shuffled Blackjack Shoe — create_shuffled_deck","text":"Creates shuffled Blackjack shoe consisting multiple standard 52-card decks combined. standard deck includes cards four suits (\"\\u2660\", \"\\u2665\", \"\\u2666\", \"\\u2663\") 13 ranks (2-10, J, Q, K, ). function returns vctrs class \"card\" record fields: name, rank, suit_symbol, suit, is_face.","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/create_shuffled_deck.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Shuffled Blackjack Shoe — create_shuffled_deck","text":"","code":"create_shuffled_deck(noOfDecks = 4)"},{"path":"https://monasharp.github.io/game-package-bilbies/reference/create_shuffled_deck.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Shuffled Blackjack Shoe — create_shuffled_deck","text":"noOfDecks Integer. number standard 52-card decks include shoe. Defaults 4.","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/create_shuffled_deck.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Shuffled Blackjack Shoe — create_shuffled_deck","text":"[vctrs][vctrs::new_rcrd] \"card\" record vector length `52 * noOfDecks`. element fields: name - character, e.g., \"2♣\", \"♠\" rank - character, one \"Two\", ..., \"Ace\" suit_symbol - character, one \"♠\", \"♥\", \"♦\", \"♣\" suit - character, one \"Spade\", \"Heart\", \"Diamond\", \"Club\" is_face - logical; TRUE Jack/Queen/King, FALSE otherwise","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/create_shuffled_deck.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Shuffled Blackjack Shoe — create_shuffled_deck","text":"returned object vctrs record class \"card\" using vctrs::new_rcrd(). can extract underlying character names .character(), access fields via vctrs::field(). print.card() method displays card names, format.card() returns card's \"name\" field.","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/create_shuffled_deck.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Shuffled Blackjack Shoe — create_shuffled_deck","text":"","code":"deck <- create_shuffled_deck() length(deck)                   # 208 (4 decks) #> [1] 208 deck                           # Prints the deck of cards #> card[208] #> 9♥ 7♠ 2♠ 6♠ K♠ A♣ A♦ 6♦ 2♥ 3♦ 2♦ 10♥ 4♦ 9♦ Q♠ 8♥ 2♠ 4♥ 6♥ 8♣ K♥ 8♦ 10♣ Q♣ 5♦ 7♥ 4♠ 5♠ 2♥ A♠ 10♠ 6♦ 5♥ 4♦ 3♦ A♣ 5♦ 5♣ 8♥ 8♠ 9♣ 8♠ 5♣ A♦ J♦ 9♥ 9♠ 6♠ 4♥ J♠ 4♥ 2♠ 6♥ 10♥ 7♦ 4♣ 2♣ 2♠ 7♣ K♠ 4♠ 7♠ 3♥ J♣ Q♣ A♠ Q♣ 8♦ 6♣ 7♦ 10♠ J♣ 9♠ 5♥ 3♦ K♦ J♦ 8♣ 10♦ 10♥ K♦ 8♥ 8♦ 8♣ 10♦ Q♥ A♠ A♠ J♣ J♠ 5♦ 5♣ J♥ 8♠ 7♠ J♦ 2♦ Q♣ 10♠ 4♣ 2♥ 7♦ Q♠ K♣ 3♠ 3♣ 6♠ Q♦ 3♣ 9♣ J♥ Q♠ 10♦ Q♠ Q♦ 8♠ 7♣ 2♣ J♣ 7♠ 4♣ 5♠ 6♥ K♣ 7♥ 10♥ K♣ 3♠ J♥ 4♠ A♥ A♥ 6♦ 5♥ 3♣ 7♥ J♠ 5♠ Q♥ 6♣ 8♣ 5♠ 3♥ 7♦ 8♦ 4♦ K♣ 4♦ 9♠ 6♦ 9♠ 9♦ K♦ 5♣ 2♣ Q♦ 3♥ 10♣ Q♦ Q♥ K♠ 7♣ 9♣ J♠ K♥ 7♣ 3♠ 5♦ Q♥ 6♣ 10♣ 9♥ 10♣ 6♥ 4♠ 2♦ 10♠ K♦ 3♦ 9♣ 3♣ 9♥ K♠ 2♦ 6♠ A♦ 4♣ 3♠ 10♦ A♥ A♥ 6♣ J♦ A♦ 2♣ 9♦ 7♥ K♥ 3♥ 2♥ 8♥ A♣ 4♥ J♥ 5♥ 9♦ A♣ K♥   deck2 <- create_shuffled_deck(noOfDecks = 6) length(deck2)                  # 312 #> [1] 312"},{"path":"https://monasharp.github.io/game-package-bilbies/reference/dealer_turn.html","id":null,"dir":"Reference","previous_headings":"","what":"Dealer Turn Logic — dealer_turn","title":"Dealer Turn Logic — dealer_turn","text":"Simulates dealer’s turn Blackjack: dealer hits reaching 17 higher, standing hard 17 hitting soft 17.","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/dealer_turn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dealer Turn Logic — dealer_turn","text":"","code":"dealer_turn(dealer_hand, deck)"},{"path":"https://monasharp.github.io/game-package-bilbies/reference/dealer_turn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dealer Turn Logic — dealer_turn","text":"dealer_hand dealer's current hand deck current deck cards","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/dealer_turn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dealer Turn Logic — dealer_turn","text":"list : hand final dealer hand drawing cards. deck updated deck removing drawn cards. total final total value dealer's hand.","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/dealer_turn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dealer Turn Logic — dealer_turn","text":"dealer continue hit total <17, also hit total=17 soft ace (soft 17).","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/dealer_turn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dealer Turn Logic — dealer_turn","text":"","code":"# Create a shuffled deck deck <- create_shuffled_deck()  # Deal 2 cards to the dealer deal_result <- deal_hand(deck, 2) dealer_hand <- deal_result$hand deck <- deal_result$deck  # Let the dealer play result <- dealer_turn(dealer_hand, deck) #> [1] Dealer's hand: K♣ 6♦ 2♣ Total: 18 result$hand   # Final dealer hand #> card[3] #> K♣ 6♦ 2♣  result$total  # Final score #> [1] 18"},{"path":"https://monasharp.github.io/game-package-bilbies/reference/dealer_turn_smart.html","id":null,"dir":"Reference","previous_headings":"","what":"Smart Dealer Turn Logic — dealer_turn_smart","title":"Smart Dealer Turn Logic — dealer_turn_smart","text":"function simulates dealer's turn Blackjack game, dealer draws cards based specific rules.","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/dealer_turn_smart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Smart Dealer Turn Logic — dealer_turn_smart","text":"","code":"dealer_turn_smart(dealer_hand, player_hand, deck)"},{"path":"https://monasharp.github.io/game-package-bilbies/reference/dealer_turn_smart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smart Dealer Turn Logic — dealer_turn_smart","text":"dealer_hand vector representing dealer's current hand. player_hand vector representing player's current hand. deck vector representing remaining deck cards.","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/dealer_turn_smart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Smart Dealer Turn Logic — dealer_turn_smart","text":"list containing: hand final dealer hand drawing cards. deck updated deck removing drawn cards. total final total value dealer's hand.","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/dealer_turn_smart.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Smart Dealer Turn Logic — dealer_turn_smart","text":"dealer keep drawing cards : - dealer's hand value 17 higher. - dealer's hand value equal 17 contains Ace valued 11. - dealer's hand value less player's hand value. player already busted (hand value 21), dealer draw cards automatically wins.","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/dealer_turn_smart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Smart Dealer Turn Logic — dealer_turn_smart","text":"","code":"# Create a shuffled deck deck <- create_shuffled_deck()  # Deal initial hands for player and dealer player_result <- deal_hand(deck, 2) player_hand <- player_result$hand deck <- player_result$deck  dealer_result <- deal_hand(deck, 2) dealer_hand <- dealer_result$hand deck <- dealer_result$deck  # Run dealer's smart turn result <- dealer_turn_smart(dealer_hand, player_hand, deck) result$hand   # Final dealer hand #> card[2] #> 9♣ 8♦  result$total  # Dealer's total score #> [1] 17"},{"path":"https://monasharp.github.io/game-package-bilbies/reference/deal_hand.html","id":null,"dir":"Reference","previous_headings":"","what":"Deal a Blackjack Hand — deal_hand","title":"Deal a Blackjack Hand — deal_hand","text":"Deals cards given deck removes deck using C++ performance. deck fall 25","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/deal_hand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deal a Blackjack Hand — deal_hand","text":"","code":"deal_hand(deck, n = 2)"},{"path":"https://monasharp.github.io/game-package-bilbies/reference/deal_hand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deal a Blackjack Hand — deal_hand","text":"deck deck cards, typically output create_shuffled_deck(). Internally, vctrs record class \"card\" (element fields name, rank, suit_symbol, suit, is_face) plain character vector card names. n Number cards deal (default = 2).","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/deal_hand.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deal a Blackjack Hand — deal_hand","text":"list : hand Character vector \"card\" record dealt cards depend deck used. deck updated deck removing dealt cards.","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/deal_hand.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Deal a Blackjack Hand — deal_hand","text":"update, deal_hand() now S3 generic methods card records old character. user use deal_hand() character vector, still work , however, lack ability check create_shuffle_deck whether amount cards fall 25 deck inherits class \"card\", dispatch deal_hand.card(). deck bare character vector, dispatch deal_hand.character(). unexpected class dispatch deal_hand.default() throws error.","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/deal_hand.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deal a Blackjack Hand — deal_hand","text":"","code":"# Create a shuffled deck and deal a hand of 2 cards deck <- create_shuffled_deck() result <- deal_hand(deck, 2) result$hand #> card[2] #> 7♦ 4♥  length(result$deck) #> [1] 206 # Automatic reshuffle small_deck <- head(create_shuffled_deck(), 6) deal_hand(small_deck, 2) #> creating new deck... #> $hand #> card[2] #> A♦ J♣  #>  #> $deck #> card[206] #> 9♣ A♣ 7♠ 10♠ 4♠ 9♥ 7♥ 5♦ K♥ 8♥ 8♣ A♠ 7♦ K♦ K♠ 6♠ A♣ K♥ 3♠ 10♦ K♣ 10♣ 8♣ 2♣ 9♦ J♦ 4♦ 6♠ 8♦ K♦ 9♣ 2♠ J♥ 9♦ 5♣ Q♦ K♠ 10♠ J♠ 7♠ A♠ 4♦ Q♥ Q♠ 7♣ K♥ 3♥ 7♣ K♠ Q♥ 2♦ Q♠ Q♣ 3♣ J♣ 6♥ 7♥ 4♦ Q♣ 7♠ 4♦ 3♦ 6♥ A♥ 6♠ K♣ 7♣ 7♦ 9♠ J♥ A♠ 5♣ 6♦ Q♥ 6♣ 6♥ J♦ 10♦ 5♥ A♠ 2♦ A♥ Q♠ 8♥ K♣ 6♦ 2♥ 9♦ A♥ 7♣ 2♣ 2♣ 3♠ 6♣ 6♣ 8♦ 9♠ A♥ J♦ 8♣ 3♣ 8♥ 9♥ J♣ 4♥ J♠ 3♣ 2♣ 5♥ K♦ K♥ 10♠ 5♥ 7♥ 5♣ 10♥ 4♠ 5♠ 2♦ 9♠ 3♥ 9♦ 2♠ 8♦ 5♥ 4♥ 2♥ 4♥ Q♣ 4♠ 8♣ 9♥ K♦ 5♦ 5♠ 9♥ 3♠ 10♦ Q♥ 2♠ 10♣ 4♥ 3♥ 6♣ A♣ 8♠ 5♣ J♠ K♠ A♦ 5♦ Q♦ 8♠ 10♥ 10♣ 10♠ 7♠ 3♣ 3♦ 9♣ 10♦ 2♥ 4♠ 6♠ 7♦ J♥ 4♣ 7♦ 8♠ Q♦ Q♣ 6♥ 10♥ 4♣ 10♥ A♦ 3♠ 8♠ 3♦ A♦ 6♦ 4♣ 4♣ 3♥ J♥ 6♦ J♦ 2♥ 2♦ 5♠ 9♠ 3♦ Q♦ 5♦ K♣ J♣ 2♠ Q♠ A♣ 10♣ J♠ 8♦ 5♠ 7♥ 9♣ 8♥  #>"},{"path":"https://monasharp.github.io/game-package-bilbies/reference/player_turn.html","id":null,"dir":"Reference","previous_headings":"","what":"Player Turn Interaction — player_turn","title":"Player Turn Interaction — player_turn","text":"Handles player's turn Blackjack game, allowing hit stand.","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/player_turn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Player Turn Interaction — player_turn","text":"","code":"player_turn(player_hand, deck, input_fn = readline)"},{"path":"https://monasharp.github.io/game-package-bilbies/reference/player_turn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Player Turn Interaction — player_turn","text":"player_hand vector cards representing player's hand. deck vector cards representing remaining deck. input_fn holder obtain player actions (defaults readline); can overridden inject fake input unit tests user want add fake actions.","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/player_turn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Player Turn Interaction — player_turn","text":"list containing: hand updated player hand turn. deck updated deck player's turn. total total value player's hand.","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/player_turn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Player Turn Interaction — player_turn","text":"1. Displaying hand: prompt, function prints player’s current hand total value    computed card_value(player_hand).  Card names shown via format(player_hand)    also account vctrs class. 2. Hit Stand: user types \"hit\" \"h\", function calls deal_hand(deck, 1)    draw one card. card appended player_hand, deck updated accordingly.    user types \"stand\" \"s\", loop ends final total printed.    input triggers “Invalid choice” message re-prompts. 3. Stopping conditions:    loop continues player chooses stand total reaches 21 higher.    player reach 21 loop end immediately.","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/player_turn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Player Turn Interaction — player_turn","text":"","code":"# Example: Player always stands immediately deck <- create_shuffled_deck() player_hand <- deal_hand(deck, 2)$hand fake_input <- function(prompt) \"stand\" player_turn(player_hand, deck, input_fn = fake_input) #> [1] Your hand: 5♦ 4♠ (Total = 9 ) #> [1] You stand at 9 #> $hand #> card[2] #> 5♦ 4♠  #>  #> $deck #> card[208] #> 5♦ 4♠ 6♠ 3♣ 10♣ 9♥ 9♠ 7♣ 8♠ 5♣ K♥ 8♣ K♠ K♦ A♣ 5♣ 4♠ 3♦ 10♥ 4♥ A♠ K♠ 10♣ J♥ 6♠ J♠ 7♦ 8♦ J♥ 10♠ 10♥ 10♦ Q♦ Q♦ 7♥ 8♦ 2♣ 7♥ 7♥ 8♠ A♦ Q♠ K♠ 6♦ 4♦ 7♦ J♦ 3♦ 6♥ K♣ A♣ 8♦ 5♠ 9♣ K♥ 4♠ J♦ 2♦ 2♣ 7♦ 5♣ 8♠ Q♦ 9♦ 10♠ 4♦ 8♣ 2♥ 6♣ 4♦ 7♣ 5♦ 4♣ Q♥ A♠ 8♥ Q♠ 5♣ 6♥ 3♣ 7♦ K♥ 6♥ 8♠ 6♦ 5♦ 4♥ J♣ Q♥ 3♦ 3♠ J♣ K♦ 4♦ 9♠ J♠ 6♣ Q♠ 2♣ Q♥ 2♣ 9♦ 6♦ 9♦ Q♠ 3♥ 6♠ 4♥ 10♠ J♦ 3♦ 7♥ 9♦ 9♥ 9♥ 4♠ K♦ 3♥ A♦ A♥ 2♥ 2♠ J♠ A♥ 3♠ 6♥ J♣ 3♣ K♣ Q♦ 2♠ A♥ 6♣ 5♦ 5♠ A♦ 10♠ J♦ 2♥ 8♥ 10♦ 9♠ 5♠ 8♣ 10♥ 10♦ A♣ K♠ A♦ 7♠ 8♣ 3♠ 3♣ Q♣ K♦ 9♥ Q♥ 8♦ 2♥ 5♥ J♥ 8♥ 5♥ Q♣ 4♣ 5♥ J♥ 10♦ 5♥ 7♠ 9♠ J♣ 4♣ 2♦ Q♣ K♣ A♣ 6♦ 2♠ 2♦ 10♣ 10♥ 2♠ 5♠ 9♣ 4♣ 7♠ 8♥ 4♥ 3♥ A♥ 6♣ 7♠ 6♠ J♠ 3♥ 9♣ A♠ 7♣ Q♣ 9♣ K♥ K♣ 10♣ 2♦ A♠ 7♣ 3♠  #>  #> $total #> [1] 9 #>"},{"path":"https://monasharp.github.io/game-package-bilbies/reference/play_blackjack.html","id":null,"dir":"Reference","previous_headings":"","what":"Play One Round of Blackjack with Action — play_blackjack","title":"Play One Round of Blackjack with Action — play_blackjack","text":"function simulates full round Blackjack player plays dealer. game designed simple interactive experience player can choose hit stand. function handles dealing cards, player actions, dealer actions, determines outcome game.","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/play_blackjack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Play One Round of Blackjack with Action — play_blackjack","text":"","code":"play_blackjack(..., input_fn = readline)"},{"path":"https://monasharp.github.io/game-package-bilbies/reference/play_blackjack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Play One Round of Blackjack with Action — play_blackjack","text":"... Additional arguments (currently unused; reserved future extensions) input_fn holder obtain player actions (defaults readline) can overridden inject fake input unit tests user want add fake actions.","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/play_blackjack.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Play One Round of Blackjack with Action — play_blackjack","text":"list elements: player_hand Character vector (vctrs “card” record) player’s final cards. dealer_hand Character vector (vctrs “card” record) dealer’s final cards. player_score Integer total player’s hand (including ace = 1 11 logic). dealer_score Integer total dealer’s hand. result Character scalar indicating outcome:                        “Player busts,” “Dealer busts,” “Player wins,”                        “Dealer wins,” “Push.”","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/play_blackjack.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Play One Round of Blackjack with Action — play_blackjack","text":"function use build-creating_shuffle_deck create shuffled deck cards, deals two cards player dealer. player can choose hit (draw another card) stand (end turn). player's turn, dealer draw cards according standard Blackjack rules reach score 17 higher. function evaluates scores determines winner. Moreover, possible user use custom deck instead. function support deck card vctrs class.","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/play_blackjack.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Play One Round of Blackjack with Action — play_blackjack","text":"","code":"# An example of how you play # play_blackjack() # The game will then ask you: \"Hit (h) or stand (s)?\" # Press hit or h for hit a new card while press stand or s for stop hitting. # Example: use a fake input to force hit until burst play_blackjack(input_fn = function(...) \"h\") #> [1] Dealer shows: 2♦ ? #> [1] Your hand: 7♣ 9♠ (Total = 16 ) #> [1] You drew K♣ #> [1] Dealer's hand: 2♦ 8♥ 3♦ 7♥ Total: 20 #> $player_hand #> card[3] #> 7♣ 9♠ K♣  #>  #> $dealer_hand #> card[4] #> 2♦ 8♥ 3♦ 7♥  #>  #> $player_score #> [1] 26 #>  #> $dealer_score #> [1] 20 #>  #> $result #> [1] \"Player busts\" #>"},{"path":"https://monasharp.github.io/game-package-bilbies/reference/play_blackjack_multi.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Multiplayer Blackjack (2 players) — play_blackjack_multi","title":"Simulate Multiplayer Blackjack (2 players) — play_blackjack_multi","text":"Simulates full round Blackjack n_players playing dealer.  player can choose hit stand turn; players finished, dealer draws according standard rules.  Finally, player’s total compared dealer’s determine outcome.","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/play_blackjack_multi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Multiplayer Blackjack (2 players) — play_blackjack_multi","text":"","code":"play_blackjack_multi(n_players = 2, input_fn = readline, ...)"},{"path":"https://monasharp.github.io/game-package-bilbies/reference/play_blackjack_multi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Multiplayer Blackjack (2 players) — play_blackjack_multi","text":"n_players Number players (default 2) input_fn holder obtain player actions (defaults readline) can overridden inject fake input unit tests user want add fake actions. ... Additional arguments (currently unused; reserved future extensions)","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/play_blackjack_multi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Multiplayer Blackjack (2 players) — play_blackjack_multi","text":"data.frame one row per player columns: player Character, e.g.\\ “Player 1”, “Player 2”, …. hand Character: player’s final cards, space-separated (e.g.\\ “♠ 10♦ 3♣”). score Integer: total value player’s hand. result Character: one “Player busts,” “Dealer busts,” “Player wins,”                        “Dealer wins,” “Push.”","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/play_blackjack_multi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate Multiplayer Blackjack (2 players) — play_blackjack_multi","text":"function use build-creating_shuffle_deck create shuffled deck cards, deals two cards player dealer. player can choose hit (draw another card) stand (end turn). every player's turn, dealer draw cards according standard Blackjack rules reach score 17 higher. function evaluates scores determines winner. Moreover, possible user use custom deck instead. function support deck card vctrs class.","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/play_blackjack_multi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Multiplayer Blackjack (2 players) — play_blackjack_multi","text":"","code":"# Simulate a game with 2 players using automatic decisions # play_blackjack_multi() # Defaults to 2 players # Player 1's turn # Hit (h) or stand (s)? # Player 2's turn # Hit (h) or stand (s)? # Example of using a custom input function to simulate player actions play_blackjack_multi(n_players = 2, input_fn = function(...) \"h\") # Both player hit until burst #> [1] Dealer shows: 3♦ ? #> [1] Player 1 turn: #> [1] Your hand: 8♣ 7♣ (Total = 15 ) #> [1] You drew 4♥ #> [1] Your hand: 8♣ 7♣ 4♥ (Total = 19 ) #> [1] You drew 10♦ #> [1] Player 2 turn: #> [1] Your hand: 6♥ 3♦ (Total = 9 ) #> [1] You drew 2♦ #> [1] Your hand: 6♥ 3♦ 2♦ (Total = 11 ) #> [1] You drew K♦ #> [1] Your hand: 6♥ 3♦ 2♦ K♦ (Total = 21 ) #> [1] You drew 7♦ #> [1] Dealer's hand: 3♦ Q♠ 6♦ Total: 19 #>     player           hand score       result #> 1 Player 1   8♣ 7♣ 4♥ 10♦    29 Player busts #> 2 Player 2 6♥ 3♦ 2♦ K♦ 7♦    28 Player busts"},{"path":"https://monasharp.github.io/game-package-bilbies/reference/simulation_blackjack.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Multiple Rounds of Blackjack — simulation_blackjack","title":"Simulate Multiple Rounds of Blackjack — simulation_blackjack","text":"function runs simulation specified number Blackjack rounds automated player dealer. player uses fixed strategy: continue drawing cards reaching user-defined threshold score (12 21). dealer uses smart strategy defined dealer_turn_smart().","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/simulation_blackjack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Multiple Rounds of Blackjack — simulation_blackjack","text":"","code":"simulation_blackjack(threshold = 16, n_sim = 1000, ...)"},{"path":"https://monasharp.github.io/game-package-bilbies/reference/simulation_blackjack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Multiple Rounds of Blackjack — simulation_blackjack","text":"threshold Numeric value 12 21 indicating score player stops drawing cards (default 16) n_sim Number rounds simulate (default 1000) ... Additional arguments (currently unused; reserved future extensions)","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/simulation_blackjack.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Multiple Rounds of Blackjack — simulation_blackjack","text":"frequency table summarizing outcomes simulated rounds. table object three possible values: \"Win\", \"Lose\", \"Push\".","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/simulation_blackjack.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate Multiple Rounds of Blackjack — simulation_blackjack","text":"simulated round: shuffled Blackjack shoe created. Two cards dealt player dealer. player automatically draws reaching exceeding threshold. dealer plays according smart strategy. outcome determined \"Win\", \"Lose\", \"Push\" (draw).","code":""},{"path":"https://monasharp.github.io/game-package-bilbies/reference/simulation_blackjack.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Multiple Rounds of Blackjack — simulation_blackjack","text":"","code":"# Run a short simulation of 10 rounds with a player threshold of 17 set.seed(123) simulation_result <- simulation_blackjack(threshold = 17, n_sim = 10) print(simulation_result) #> Outcome #> Lose Push  Win  #>    4    3    3"}]
